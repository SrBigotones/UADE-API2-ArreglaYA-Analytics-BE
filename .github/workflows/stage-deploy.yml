name: Deploy to Stage

on:
  push:
    branches: [develop]

permissions:
  id-token: write
  contents: read

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm
      
      # Install dependencies and build TypeScript
      - run: npm ci
      - run: npm run build

      - uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ vars.AWS_ROLE_ARN_STAGE }}
          aws-region: ${{ vars.AWS_REGION }}

      - uses: aws-actions/setup-sam@v2
      
      # Delete the stack if it exists in ROLLBACK_COMPLETE state
      - name: Delete failed stack
        run: |
          if aws cloudformation describe-stacks --stack-name arreglaya-analytics-be-stage 2>&1 | grep -q 'ROLLBACK_COMPLETE'; then
            aws cloudformation delete-stack --stack-name arreglaya-analytics-be-stage
            aws cloudformation wait stack-delete-complete --stack-name arreglaya-analytics-be-stage
          fi
        continue-on-error: true
      
      - run: sam build --use-container
      
      # Deploy with secure parameters
      - name: Get SSM Parameters
        id: ssm
        run: |
          {
            # Desactivar el echo de comandos
            set +x
            
            # Función para añadir secreto a GITHUB_ENV de forma segura
            add_secret() {
              local name=$1
              local value=$2
              echo "$name<<EOF" >> $GITHUB_ENV
              echo "$value" >> $GITHUB_ENV
              echo "EOF" >> $GITHUB_ENV
            }
            
            # Obtener y guardar parámetros como secretos
            add_secret "DB_HOST" "$(aws ssm get-parameter --name '/arreglaya/analytics/stage/db/host' --with-decryption --query 'Parameter.Value' --output text)"
            add_secret "DB_USERNAME" "$(aws ssm get-parameter --name '/arreglaya/analytics/stage/db/username' --with-decryption --query 'Parameter.Value' --output text)"
            add_secret "DB_PASSWORD" "$(aws ssm get-parameter --name '/arreglaya/analytics/stage/db/password' --with-decryption --query 'Parameter.Value' --output text)"
            add_secret "DB_NAME" "$(aws ssm get-parameter --name '/arreglaya/analytics/stage/db/name' --with-decryption --query 'Parameter.Value' --output text)"
            add_secret "USERS_API_BASE_URL" "$(aws ssm get-parameter --name '/arreglaya/analytics/stage/db/users-api-base-url' --with-decryption --query 'Parameter.Value' --output text)"
            add_secret "CORE_HUB_API_KEY" "$(aws ssm get-parameter --name '/arreglaya/analytics/stage/db/core-hub-api-key' --with-decryption --query 'Parameter.Value' --output text)"
            add_secret "CORE_HUB_URL" "$(aws ssm get-parameter --name '/arreglaya/analytics/stage/db/core-hub-url' --with-decryption --query 'Parameter.Value' --output text)"
            add_secret "WEBHOOK_SECRET" "$(aws ssm get-parameter --name '/arreglaya/analytics/stage/db/webhook-secret' --with-decryption --query 'Parameter.Value' --output text)"
            add_secret "WEBHOOK_BASE_URL" "$(aws ssm get-parameter --name '/arreglaya/analytics/stage/db/webhook-base-url' --with-decryption --query 'Parameter.Value' --output text)"
            
            echo "::debug::SSM parameters retrieved successfully"
          } 2>/dev/null # Suprimir errores en la salida

      - name: Deploy SAM application
        run: |
          set +x # Desactivar echo de comandos
          
          # Crear archivo temporal para los parámetros
          PARAMS_FILE=$(mktemp)
          
          # Escribir parámetros al archivo de forma segura
          cat << 'PARAMETERS' > "$PARAMS_FILE"
          Stage=stage
          DBHost=${{ env.DB_HOST }}
          DBUsername=${{ env.DB_USERNAME }}
          DBPassword=${{ env.DB_PASSWORD }}
          DBName=${{ env.DB_NAME }}
          UsersApiBaseUrl=${{ env.USERS_API_BASE_URL }}
          CoreHubApiKey=${{ env.CORE_HUB_API_KEY }}
          CoreHubUrl=${{ env.CORE_HUB_URL }}
          WebhookSecret=${{ env.WEBHOOK_SECRET }}
          WebhookBaseUrl=${{ env.WEBHOOK_BASE_URL }}
          PARAMETERS
          
          # Ejecutar sam deploy sin mostrar los parámetros
          echo "::debug::Starting SAM deployment..."
          sam deploy \
            --stack-name arreglaya-analytics-be-stage \
            --no-confirm-changeset \
            --capabilities CAPABILITY_IAM \
            --resolve-s3 \
            --parameter-overrides "$(cat $PARAMS_FILE)" > >(grep -v "parameter-overrides") 2>&1
          
          # Limpiar
          rm -f "$PARAMS_FILE"
          echo "::debug::SAM deployment completed"