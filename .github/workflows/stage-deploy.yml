name: Deploy to Stage

on:
  push:
    branches: [develop]

permissions:
  id-token: write
  contents: read

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm
      
      # Install dependencies and build TypeScript
      - run: npm ci
      - run: npm run build

      - uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ vars.AWS_ROLE_ARN_STAGE }}
          aws-region: ${{ vars.AWS_REGION }}

      - uses: aws-actions/setup-sam@v2
      
      # Delete the stack if it exists in ROLLBACK_COMPLETE state
      - name: Delete failed stack
        run: |
          if aws cloudformation describe-stacks --stack-name arreglaya-analytics-be-stage 2>&1 | grep -q 'ROLLBACK_COMPLETE'; then
            aws cloudformation delete-stack --stack-name arreglaya-analytics-be-stage
            aws cloudformation wait stack-delete-complete --stack-name arreglaya-analytics-be-stage
          fi
        continue-on-error: true
      
      - run: sam build --use-container
      
      # Deploy with secure parameters
      - name: Get SSM Parameters
        id: ssm
        run: |
          {
            # Desactivar el echo de comandos
            set +x
            
            # Funci칩n para a침adir secreto a GITHUB_ENV de forma segura
            add_secret() {
              local name=$1
              local value=$2
              echo "$name<<EOF" >> $GITHUB_ENV
              echo "$value" >> $GITHUB_ENV
              echo "EOF" >> $GITHUB_ENV
            }
            
            # Obtener y guardar par치metros como secretos
            add_secret "DB_HOST" "$(aws ssm get-parameter --name '/arreglaya/analytics/stage/db/host' --with-decryption --query 'Parameter.Value' --output text)"
            add_secret "DB_USERNAME" "$(aws ssm get-parameter --name '/arreglaya/analytics/stage/db/username' --with-decryption --query 'Parameter.Value' --output text)"
            add_secret "DB_PASSWORD" "$(aws ssm get-parameter --name '/arreglaya/analytics/stage/db/password' --with-decryption --query 'Parameter.Value' --output text)"
            add_secret "DB_NAME" "$(aws ssm get-parameter --name '/arreglaya/analytics/stage/db/name' --with-decryption --query 'Parameter.Value' --output text)"
            add_secret "USERS_API_BASE_URL" "$(aws ssm get-parameter --name '/arreglaya/analytics/stage/db/users-api-base-url' --with-decryption --query 'Parameter.Value' --output text)"
            add_secret "CORE_HUB_API_KEY" "$(aws ssm get-parameter --name '/arreglaya/analytics/stage/db/core-hub-api-key' --with-decryption --query 'Parameter.Value' --output text)"
            add_secret "CORE_HUB_URL" "$(aws ssm get-parameter --name '/arreglaya/analytics/stage/db/core-hub-url' --with-decryption --query 'Parameter.Value' --output text)"
            add_secret "WEBHOOK_SECRET" "$(aws ssm get-parameter --name '/arreglaya/analytics/stage/db/webhook-secret' --with-decryption --query 'Parameter.Value' --output text)"
            add_secret "WEBHOOK_BASE_URL" "$(aws ssm get-parameter --name '/arreglaya/analytics/stage/db/webhook-base-url' --with-decryption --query 'Parameter.Value' --output text)"
            
            echo "::debug::SSM parameters retrieved successfully"
          } 2>/dev/null # Suprimir errores en la salida

      - name: Deploy SAM application
        env:
          # Configurar para ocultar secretos en logs
          PARAMETERS: |
            Stage=stage
            DBHost=***
            DBUsername=***
            DBPassword=***
            DBName=***
            UsersApiBaseUrl=***
            CoreHubApiKey=***
            CoreHubUrl=***
            WebhookSecret=***
            WebhookBaseUrl=***
        run: |
          {
            set +x # Desactivar echo de comandos
            
            # Crear archivo temporal seguro
            PARAMS_FILE=$(mktemp -t params.XXXXXX)
            chmod 600 "$PARAMS_FILE"
            
            # Escribir par치metros de forma segura
            echo "Stage=stage" > "$PARAMS_FILE"
            echo "DBHost='$DB_HOST'" >> "$PARAMS_FILE"
            echo "DBUsername='$DB_USERNAME'" >> "$PARAMS_FILE"
            echo "DBPassword='$DB_PASSWORD'" >> "$PARAMS_FILE"
            echo "DBName='$DB_NAME'" >> "$PARAMS_FILE"
            echo "UsersApiBaseUrl='$USERS_API_BASE_URL'" >> "$PARAMS_FILE"
            echo "CoreHubApiKey='$CORE_HUB_API_KEY'" >> "$PARAMS_FILE"
            echo "CoreHubUrl='$CORE_HUB_URL'" >> "$PARAMS_FILE"
            echo "WebhookSecret='$WEBHOOK_SECRET'" >> "$PARAMS_FILE"
            echo "WebhookBaseUrl='$WEBHOOK_BASE_URL'" >> "$PARAMS_FILE"
            
            # Log seguro de inicio
            echo "::debug::Starting SAM deployment with parameters:"
            echo "$PARAMETERS"
            
            # Ejecutar sam deploy con salida filtrada
            sam deploy \
              --stack-name arreglaya-analytics-be-stage \
              --no-confirm-changeset \
              --capabilities CAPABILITY_IAM \
              --resolve-s3 \
              --parameter-overrides "$(cat $PARAMS_FILE)" 2>&1 | \
              sed -E 's/(DBHost|DBUsername|DBPassword|DBName|UsersApiBaseUrl|CoreHubApiKey|CoreHubUrl|WebhookSecret|WebhookBaseUrl)=[^ ]*/***/g'
            
            # Limpiar de forma segura
            shred -u "$PARAMS_FILE"
            
            echo "::debug::SAM deployment completed"
          } 2> >(sed 's/[[:print:]]//g')