name: Deploy to Stage

on:
  push:
    branches: [develop]

permissions:
  id-token: write
  contents: read

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm
      
      # Install dependencies and build TypeScript
      - run: npm ci
      - run: npm run build

      - uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ vars.AWS_ROLE_ARN_STAGE }}
          aws-region: ${{ vars.AWS_REGION }}

      - uses: aws-actions/setup-sam@v2
      
      # Delete the stack if it exists in ROLLBACK_COMPLETE state
      - name: Delete failed stack
        run: |
          if aws cloudformation describe-stacks --stack-name arreglaya-analytics-be-stage 2>&1 | grep -q 'ROLLBACK_COMPLETE'; then
            aws cloudformation delete-stack --stack-name arreglaya-analytics-be-stage
            aws cloudformation wait stack-delete-complete --stack-name arreglaya-analytics-be-stage
          fi
        continue-on-error: true
      
      - run: sam build --use-container
      
      # Deploy with secure parameters
      - name: Get SSM Parameters
        id: ssm
        env:
          PARAM_PATH: /arreglaya/analytics/stage/db
        run: |
          {
            set -e  # Exit on any error
            set +x  # Disable command echo
            
            # Función para obtener y enmascarar parámetro de SSM
            get_ssm_param() {
              local param_name=$1
              local param_value
              param_value=$(aws ssm get-parameter --name "$PARAM_PATH/$param_name" --with-decryption --query 'Parameter.Value' --output text)
              # Enmascarar el valor inmediatamente
              echo "::add-mask::$param_value"
              echo "$param_value"
            }
            
            # Obtener y almacenar parámetros de forma segura
            {
              echo "DB_HOST=$(get_ssm_param 'host')" >> "$GITHUB_ENV"
              echo "DB_USERNAME=$(get_ssm_param 'username')" >> "$GITHUB_ENV"
              echo "DB_PASSWORD=$(get_ssm_param 'password')" >> "$GITHUB_ENV"
              echo "DB_NAME=$(get_ssm_param 'name')" >> "$GITHUB_ENV"
              echo "USERS_API_BASE_URL=$(get_ssm_param 'users-api-base-url')" >> "$GITHUB_ENV"
              echo "CORE_HUB_API_KEY=$(get_ssm_param 'core-hub-api-key')" >> "$GITHUB_ENV"
              echo "CORE_HUB_URL=$(get_ssm_param 'core-hub-url')" >> "$GITHUB_ENV"
              echo "WEBHOOK_SECRET=$(get_ssm_param 'webhook-secret')" >> "$GITHUB_ENV"
              echo "WEBHOOK_BASE_URL=$(get_ssm_param 'webhook-base-url')" >> "$GITHUB_ENV"
            } 2>/dev/null

            echo "::debug::SSM parameters retrieved and masked successfully"
          }

      - name: Deploy SAM application
        env:
          SAM_CLI_TELEMETRY: 0
        run: |
          set +x # Disable command echo
          
          echo "::debug::Starting SAM deployment..."
          
          # Deploy using masked environment variables directly
          sam deploy \
            --stack-name arreglaya-analytics-be-stage \
            --no-confirm-changeset \
            --capabilities CAPABILITY_IAM \
            --resolve-s3 \
            --parameter-overrides \
              Stage=stage \
              DBHost="$DB_HOST" \
              DBUsername="$DB_USERNAME" \
              DBPassword="$DB_PASSWORD" \
              DBName="$DB_NAME" \
              UsersApiBaseUrl="$USERS_API_BASE_URL" \
              CoreHubApiKey="$CORE_HUB_API_KEY" \
              CoreHubUrl="$CORE_HUB_URL" \
              WebhookSecret="$WEBHOOK_SECRET" \
              WebhookBaseUrl="$WEBHOOK_BASE_URL" \
            --no-execute-changeset false
          
          echo "::debug::SAM deployment completed"