name: Deploy to Stage

on:
  push:
    branches: [develop]

permissions:
  id-token: write
  contents: read

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm
      
      # Install dependencies and build TypeScript
      - run: npm ci
      - run: npm run build

      - uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ vars.AWS_ROLE_ARN_STAGE }}
          aws-region: ${{ vars.AWS_REGION }}

      - uses: aws-actions/setup-sam@v2
      
      # Delete the stack if it exists in ROLLBACK_COMPLETE state
      - name: Delete failed stack
        run: |
          if aws cloudformation describe-stacks --stack-name arreglaya-analytics-be-stage 2>&1 | grep -q 'ROLLBACK_COMPLETE'; then
            aws cloudformation delete-stack --stack-name arreglaya-analytics-be-stage
            aws cloudformation wait stack-delete-complete --stack-name arreglaya-analytics-be-stage
          fi
        continue-on-error: true
      
      - run: sam build --use-container
      
      # Deploy with secure parameters
      - name: Get SSM Parameters
        id: ssm
        run: |
          echo "DB_HOST=$(aws ssm get-parameter --name '/arreglaya/analytics/stage/db/host' --with-decryption --query 'Parameter.Value' --output text)" >> $GITHUB_ENV
          echo "DB_USERNAME=$(aws ssm get-parameter --name '/arreglaya/analytics/stage/db/username' --with-decryption --query 'Parameter.Value' --output text)" >> $GITHUB_ENV
          echo "DB_PASSWORD=$(aws ssm get-parameter --name '/arreglaya/analytics/stage/db/password' --with-decryption --query 'Parameter.Value' --output text)" >> $GITHUB_ENV
          echo "DB_NAME=$(aws ssm get-parameter --name '/arreglaya/analytics/stage/db/name' --with-decryption --query 'Parameter.Value' --output text)" >> $GITHUB_ENV
          echo "USERS_API_BASE_URL=$(aws ssm get-parameter --name '/arreglaya/analytics/stage/db/users-api-base-url' --with-decryption --query 'Parameter.Value' --output text)" >> $GITHUB_ENV
          echo "CORE_HUB_API_KEY=$(aws ssm get-parameter --name '/arreglaya/analytics/stage/db/core-hub-api-key' --with-decryption --query 'Parameter.Value' --output text)" >> $GITHUB_ENV
          echo "CORE_HUB_URL=$(aws ssm get-parameter --name '/arreglaya/analytics/stage/db/core-hub-url' --with-decryption --query 'Parameter.Value' --output text)" >> $GITHUB_ENV
          echo "WEBHOOK_SECRET=$(aws ssm get-parameter --name '/arreglaya/analytics/stage/db/webhook-secret' --with-decryption --query 'Parameter.Value' --output text)" >> $GITHUB_ENV
          echo "WEBHOOK_BASE_URL=$(aws ssm get-parameter --name '/arreglaya/analytics/stage/db/webhook-base-url' --with-decryption --query 'Parameter.Value' --output text)" >> $GITHUB_ENV

      - name: Deploy SAM application
        run: >
          sam deploy 
          --stack-name arreglaya-analytics-be-stage 
          --no-confirm-changeset 
          --capabilities CAPABILITY_IAM 
          --resolve-s3 
          --parameter-overrides 
          Stage=stage 
          DBHost=${{ env.DB_HOST }} 
          DBUsername=${{ env.DB_USERNAME }} 
          DBPassword=${{ env.DB_PASSWORD }} 
          DBName=${{ env.DB_NAME }} 
          UsersApiBaseUrl=${{ env.USERS_API_BASE_URL }} 
          CoreHubApiKey=${{ env.CORE_HUB_API_KEY }} 
          CoreHubUrl=${{ env.CORE_HUB_URL }} 
          WebhookSecret=${{ env.WEBHOOK_SECRET }} 
          WebhookBaseUrl=${{ env.WEBHOOK_BASE_URL }}